name: Release

on:
  workflow_dispatch:

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      releaseVersion: ${{ steps.package-version.outputs.current-version }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: v16.13.0
      - run: corepack enable
      - run: yarn install
      - run: yarn build
      - run: yarn electron:sync
      - uses: actions/upload-artifact@v3
        with:
          name: electron
          path: electron/
      - run: yarn semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@master
  attach-binaries:
    name: Attach binaries to GitHub Release
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
      fail-fast: false
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: v16.13.0
      - run: corepack enable
      - uses: actions/download-artifact@v3
        with:
          name: electron
      - run: yarn install
      - run: npm --no-git-tag-version version ${{ needs.release.outputs.releaseVersion }}
        continue-on-error: true
      - name: Sets env vars for macOS code signing
        if: matrix.os == 'macos-latest'
        run: |
          echo "CSC_LINK<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.CSC_LINK }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{ secrets.CSC_KEY_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLEID=${{ secrets.APPLEID }}" >> $GITHUB_ENV
          echo "APPLEIDPASS=${{ secrets.APPLEIDPASS }}" >> $GITHUB_ENV
      - run: yarn electron:make
        env:
          GH_TOKEN: '${{ secrets.github_token }}'
          EP_GH_IGNORE_TIME: true
