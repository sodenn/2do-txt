name: Electron

on: push

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
#        os: [ ubuntu-latest, macos-latest ]
        os: [ macos-latest ]
    steps:
      - name: Sets env vars for macOS code signing
        if: matrix.os == 'macos-latest'
        run: |
          echo "CSC_LINK<<EOF" >> $GITHUB_ENV
          echo "${{ secrets.CSC_LINK }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "CSC_KEY_PASSWORD=${{ secrets.CSC_KEY_PASSWORD }}" >> $GITHUB_ENV
          echo "APPLEID=${{ secrets.APPLEID }}" >> $GITHUB_ENV
          echo "APPLEIDPASS=${{ secrets.APPLEIDPASS }}" >> $GITHUB_ENV
#      - uses: actions/checkout@v2
#      - uses: actions/setup-node@v2
#        with:
#          node-version: v16.13.0
#      - name: Get yarn cache directory path
#        id: yarn-cache-dir-path
#        run: echo "::set-output name=dir::$(yarn cache dir)"
#      - uses: actions/cache@v2
#        id: yarn-cache
#        with:
#          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
#          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-yarn-
#      - run: yarn install --frozen-lockfile
#      - run: yarn build
#      - run: yarn electron:sync
#      - run: yarn install --frozen-lockfile
#        working-directory: electron
#      - name: Sets env vars for macOS code signing
#        if: matrix.os == 'macos-latest'
#        run: |
#          echo "CSC_LINK=${{ secrets.CSC_LINK }}" >> $GITHUB_ENV
#          echo "CSC_KEY_PASSWORD=${{ secrets.CSC_KEY_PASSWORD }}" >> $GITHUB_ENV
#          echo "APPLEID=${{ secrets.APPLEID }}" >> $GITHUB_ENV
#          echo "APPLEIDPASS=${{ secrets.APPLEIDPASS }}" >> $GITHUB_ENV
#      - run: yarn electron:make
#        working-directory: electron
#        env:
#          GH_TOKEN: '${{ secrets.github_token }}'
#          EP_GH_IGNORE_TIME: true